// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eShop.Data;

#nullable disable

namespace eShop.Data.Migrations
{
    [DbContext(typeof(eShopDbContext))]
    partial class eShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("eShop.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("City")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LastName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("eShop.Data.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("eShop.Data.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("eShop.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Laptops"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Desktop Computers"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Monitors"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Printers"
                        },
                        new
                        {
                            Id = 5,
                            Name = "SSD Disks"
                        },
                        new
                        {
                            Id = 6,
                            Name = "RAM Memories"
                        });
                });

            modelBuilder.Entity("eShop.Data.Models.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("eShop.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OrderState")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("eShop.Data.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("eShop.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(7, 2)
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("Warranty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "AMD Ryzen 5 3500U (2.1/3.7 GHz, 4M)\r\nAMD Radeon RX Vega 8\r\n16 GB DDR4\r\n512GB M.2 NVMe SSD\r\n15.6\" Full HD IPS",
                            ImagePath = "/images/acer-aspire-3-a315-23-23g-23s-285196.jpg",
                            IsAvailable = true,
                            Name = "Acer Aspire 3 A315-23-R7ZD, 15.6\"",
                            Price = 450m,
                            Warranty = 24
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intel Core i3-1115G4 (3.0/4.1GHz, 6M)\r\nIntel UHD Graphics Xe G4 48EUs\r\n8 GB DDR4 3200 MHz\r\n500GB M.2 NVMe SSD\r\n17.3\" Full HD IPS",
                            ImagePath = "/images/acer-aspire-5-a517-52-52g-369575.jpg",
                            IsAvailable = true,
                            Name = "Acer Aspire 5 A517-52-34QX, 17.3\", Full HD",
                            Price = 450m,
                            Warranty = 24
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intel Core i5-1235U (0.9/4.4GHz, 12M)\r\nIntel Iris Xe Graphics\r\n16 GB DDR4 3200 MHz\r\n500GB M.2 NVMe SSD\r\n14\" Full HD IPS",
                            ImagePath = "/images/dell-latitude-5430-386927.jpg",
                            IsAvailable = true,
                            Name = "Dell Latitude 5430, 14.0\", Full HD",
                            Price = 350m,
                            Warranty = 24
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intel Core i5-1235U (0.9/4.4GHz, 12M)\r\nIntel Iris Xe Graphics\r\n16 GB DDR4 3200 MHz\r\n1TB M.2 NVMe SSD\r\n15.6\" Full HD IPS",
                            ImagePath = "/images/hp-15s-fq3000-338974.jpg",
                            IsAvailable = true,
                            Name = "HP 15s-fq5010nu, 15.6\", Full HD",
                            Price = 550m,
                            Warranty = 24
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intel Core i5-12500H (1.8/4.5GHz, 18M)\r\nNVIDIA RTX 3060 6GB\r\n16 GB DDR5 4800 MHz\r\n512GB M.2 NVMe SSD\r\n16.1\" Full HD IPS ",
                            ImagePath = "/images/hp-16-d1000-404950.jpg",
                            IsAvailable = true,
                            Name = "HP Victus 16-d1004nu, 16.1\", Full HD",
                            Price = 420m,
                            Warranty = 24
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "AMD Ryzen 5 5625U (2.3/4.3GHz, 16MB)\r\nAMD Radeon RX Vega 7\r\n8 GB DDR4 3200 MHz\r\n256GB M.2 NVMe SSD\r\n15.6\" Full HD TN",
                            ImagePath = "/images/lenovo-v15-g3-432234.jpg",
                            IsAvailable = true,
                            Name = "Lenovo V15 G3 ABA, 15.6\", Full HD",
                            Price = 500m,
                            Warranty = 24
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intel Core i5-13400 (1.8/4.6GHz, 20M)\r\nIntel UHD Graphics 730\r\n16 GB DDR4 3200 MHz\r\n512 GB SSD M.2 NVMe",
                            ImagePath = "/images/dell-vostro-3020-tower-desktop-462113.jpg",
                            IsAvailable = true,
                            Name = "Dell Vostro 3020 Tower Desktop",
                            Price = 750m,
                            Warranty = 36
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intel Core i5-10400 (2.9/4.3 GHz, 12M)\r\nIntel UHD Graphics 630\r\n8 GB DDR4\r\n256 GB SSD M.2 NVMe",
                            ImagePath = "/images/asus-expertcenter-d5-tower-d500tc-396290.jpg",
                            IsAvailable = true,
                            Name = "ASUS ExpertCenter D5 Tower",
                            Price = 600m,
                            Warranty = 24
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intel Core i5-12400 (2.5/4.4GHz, 18M)\r\nIntel UHD Graphics 730\r\n2x8GB DDR4 3200 MHz\r\n512 GB SSD M.2 NVMe",
                            ImagePath = "/images/lenovo-thinkcentre-neo-50s-sff-388939.jpg",
                            IsAvailable = true,
                            Name = "Lenovo ThinkCentre Neo 50s SFF",
                            Price = 550m,
                            Warranty = 36
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intel Core i7-12700KF (3.6/5.0GHz, 25M)\r\nNVIDIA RTX 3080 10GB\r\n32 GB DDR4 3200 MHz\r\n1TB 7200rpm\r\n512 GB SSD M.2 NVMe",
                            ImagePath = "/images/asus-rog-strix-gt15-g15cf-432083.jpg",
                            IsAvailable = true,
                            Name = "ASUS ROG Strix GT15 ",
                            Price = 2500m,
                            Warranty = 60
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "AMD Ryzen 9 5900X (3.70/4.80 GHz, 64M)\r\nNVIDIA GeForce RTX 3070 Ti 8GB\r\n2 x 16 GB DDR4 3200 MHz\r\n1 TB SSD M.2 NVMe",
                            ImagePath = "/images/lenovo-legion-t5-26iob6-334470.jpg",
                            IsAvailable = true,
                            Name = "Lenovo Legion T5 Tower",
                            Price = 2000m,
                            Warranty = 24
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intel Core i7-13700KF (3.4-5.4GHz, 30 M)\r\nNVIDIA RTX 3080 10GB\r\n2 x 16 GB DDR5 4800 MHz\r\n2TB 7200rpm\r\n512 GB SSD M.2 NVMe",
                            ImagePath = "/images/asus-rog-strix-g35ca-451273.jpg",
                            IsAvailable = true,
                            Name = "ASUS ROG Strix G35CA",
                            Price = 3200m,
                            Warranty = 36
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Diagonal Size: 23.8\"\r\nResolution: 1920 x 1080\r\nPanel Type: IPS\r\nBrightness: 250 cd/m2\r\nInterfaces: 2 x HDMI 1.4, 1 x Audio line-out",
                            ImagePath = "/images/monitor-led-dell-s2421h-23-8-ips-anti-glare-1920x1-290329.jpg",
                            IsAvailable = true,
                            Name = "Dell S2421H 23.8\"",
                            Price = 580m,
                            Warranty = 36
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Diagonal Size: 21.5\"\r\nResolution: 1920 x 1080\r\nPanel Type: IPS\r\nBrightness: 250 cd/m2\r\nInterfaces: 2 x HDMI 1.4, 1 x Audio line-out",
                            ImagePath = "/images/21-5-acer-v226hqlbbi-433345.jpg",
                            IsAvailable = true,
                            Name = "Acer V226HQLBbi 21.5\"",
                            Price = 600m,
                            Warranty = 24
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Diagonal Size: 23.8\"\r\nResolution: 1920 x 1080\r\nPanel Type: IPS\r\nBrightness: 250 cd/m2\r\nInterfaces: 2 x HDMI 1.4, 1 x Audio line-out",
                            ImagePath = "/images/hp-m24f-fhd-23-8-monitor-black-2y-warranty-362696.jpg",
                            IsAvailable = true,
                            Name = "HP M24fw 23.8\"",
                            Price = 150m,
                            Warranty = 26
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Diagonal Size: 23.8\"\r\nResolution: 1920 x 1080\r\nPanel Type: IPS\r\nBrightness: 250 cd/m2\r\nInterfaces: 2 x HDMI 1.4, 1 x Audio line-out",
                            ImagePath = "/images/23-8-lenovo-d24-40-67a2kac6eu-438170.jpg",
                            IsAvailable = true,
                            Name = "Lenovo D24-40 23.8\"",
                            Price = 105m,
                            Warranty = 60
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Diagonal Size: 27\"\r\nResolution: 1920 x 1080\r\nPanel Type: IPS\r\nBrightness: 250 cd/m2\r\nInterfaces: 2 x HDMI 1.4, 1 x Audio line-out",
                            ImagePath = "/images/27-lg-ultragear-27gn800p-b-473256.jpg",
                            IsAvailable = true,
                            Name = "LG UltraGear 27GN800P 27\"",
                            Price = 320m,
                            Warranty = 36
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Diagonal Size: 23.8\"\r\nResolution: 1920 x 1080\r\nPanel Type: IPS\r\nBrightness: 250 cd/m2\r\nInterfaces: 2 x HDMI 1.4, 1 x Audio line-out",
                            ImagePath = "/images/23-8-philips-243v7qdsb-337418.jpg",
                            IsAvailable = true,
                            Name = "Philips 243V7QDSB 23.8\"",
                            Price = 320m,
                            Warranty = 36
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Type: black-white\r\nPrint speed: up to 21 ppm\r\nMaximum print resolution: 600 x 600",
                            ImagePath = "/images/xerox-phaser-3020bi-100185.jpg",
                            IsAvailable = true,
                            Name = "Xerox Phaser 3020BI",
                            Price = 108m,
                            Warranty = 24
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Type: black-white\r\nPrint speed: up to 20 ppm\r\nMaximum print resolution: 2400 x 2400",
                            ImagePath = "/images/brother-hl-1222we-laser-printer-179988.jpg",
                            IsAvailable = true,
                            Name = "Brother HL-1222WE",
                            Price = 110m,
                            Warranty = 24
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Type: color\r\nPrint speed: up to 24 ppm\r\nMaximum print resolution: 9600 x 2400",
                            ImagePath = "/images/canon-pixma-ix6850-142834.jpg",
                            IsAvailable = true,
                            Name = "Canon PIXMA iX6850",
                            Price = 260m,
                            Warranty = 24
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Type: black-white\r\nPrint speed: up to 20 ppm\r\nMaximum print resolution: 600 x 600",
                            ImagePath = "/images/hp-laserjet-m110we-455714.jpg",
                            IsAvailable = true,
                            Name = "HP LaserJet M110we",
                            Price = 95m,
                            Warranty = 12
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Type: black-white\r\nPrint speed: up to 27 ppm\r\nMaximum print resolution: 600 x 600",
                            ImagePath = "/images/hp-color-laserjet-pro-m454dw-printer-235409.jpg",
                            IsAvailable = true,
                            Name = "HP LaserJet Pro M454dw",
                            Price = 320m,
                            Warranty = 36
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Type: black-white\r\nPrint speed: up to 24 ppm\r\nMaximum print resolution: 4800 x 1200",
                            ImagePath = "/images/canon-pixma-g1430-473878.jpg",
                            IsAvailable = true,
                            Name = "Canon PIXMA G1430",
                            Price = 130m,
                            Warranty = 24
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Type: SSD\r\nForm Factor: 2,5\"\r\nCapacity: 500 GB\r\nInterface: SATA 3 (6Gb/s)",
                            ImagePath = "/images/ssd-wd-blue-2-5-500gb-sata-6gb-s-392474.jpg",
                            IsAvailable = true,
                            Name = "500GB SSD WD Blue WDS500G3B0A",
                            Price = 30m,
                            Warranty = 60
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Type: SSD\r\nForm Factor: 2,5\"\r\nCapacity: 512 GB\r\nInterface: SATA 3 (6Gb/s)",
                            ImagePath = "/images/128gb-ssd-silicon-power-ace-a55-187308.jpg",
                            IsAvailable = true,
                            Name = "512GB SSD Silicon Power Ace A55",
                            Price = 30m,
                            Warranty = 60
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Type: SSD\r\nForm Factor: M.2 (2280)\"\r\nCapacity: 1 TB\r\nInterface: NVMe 1.3, 1 x PCI Express 3.0 x4",
                            ImagePath = "/images/enterprise-ssd-samsung-970-evo-plus-series-1-tb-3d-222588.jpg",
                            IsAvailable = true,
                            Name = "1TB SSD Samsung 970 EVO Plus0",
                            Price = 70m,
                            Warranty = 60
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Type: SSD\r\nForm Factor: M.2 (2280)\"\r\nCapacity: 1 TB\r\nInterface: NVMe 1.3, 1 x PCI Express 3.0 x4",
                            ImagePath = "/images/ssd-wd-blue-m-2-1tb-pcie-gen3-357316.jpg",
                            IsAvailable = true,
                            Name = "1TB SSD WD Blue SN570",
                            Price = 95m,
                            Warranty = 65
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Type: SSD\r\nForm Factor: 2,5\"\r\nCapacity: 1 TB\r\nInterface: SATA 3 (6Gb/s)",
                            ImagePath = "/images/solid-state-drive-ssd-samsung-870-evo-sata-2-5-rdq-303041.jpg",
                            IsAvailable = true,
                            Name = "1TB SSD Samsung 870 EVO",
                            Price = 75m,
                            Warranty = 60
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Type: SSD\r\nForm Factor: 2,5\"\r\nCapacity: 1 TB\r\nInterface: SATA 3 (6Gb/s)",
                            ImagePath = "/images/wd-green-sata-1tb-ssd-2-5inch-internal-444549.jpg",
                            IsAvailable = true,
                            Name = "1TB SSD WD Green",
                            Price = 90m,
                            Warranty = 36
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 6,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Type: DDR5\r\nFrequencies: 5600 MHz\r\nLatencies: CL36, 36-38-38\r\nCapacities: 8GB",
                            ImagePath = "/images/8g-ddr5-5600-kingst-expo-beast-449536.jpg",
                            IsAvailable = true,
                            Name = "8GB DDR5 5600 Kingston FURY Beast",
                            Price = 40m,
                            Warranty = 60
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 6,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Type: DDR4\r\nFrequencies: 3200 MHz\r\nLatencies: CL36, 19-19-19\r\nCapacities: 8GB",
                            ImagePath = "/images/8gb-ddr4-3200-adata-xpg-d10-443745.jpg",
                            IsAvailable = true,
                            Name = "8GB DDR4 3200 ADATA XPG",
                            Price = 20m,
                            Warranty = 60
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 6,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Type: DDR4\r\nFrequencies: 3600 MHz\r\nLatencies: CL36, 36-38-38\r\nCapacities: 2x8GB",
                            ImagePath = "/images/2x8g-ddr4-3600-adata-xpg-db10-353858.jpg",
                            IsAvailable = true,
                            Name = "2x8GB DDR4 3600 ADATA XPG",
                            Price = 70m,
                            Warranty = 96
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 6,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Type: DDR4\r\nFrequencies: 3200 MHz\r\nLatencies: 16-18-18-38\r\nCapacities: 16GB",
                            ImagePath = "/images/pamet-g-skill-aegis-16gb-ddr4-pc4-25600-3200mhz-cl-287577.jpg",
                            IsAvailable = true,
                            Name = "16GB DDR4 3200 G.SKILL Aegis",
                            Price = 45m,
                            Warranty = 60
                        },
                        new
                        {
                            Id = 35,
                            CategoryId = 6,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Type: DDR3\r\nFrequencies: 1600 MHz\r\nCapacities: 8GB",
                            ImagePath = "/images/8gb-ddr3-1600-apacer-149180.jpg",
                            IsAvailable = true,
                            Name = "8GB DDR3 1600 Apacer",
                            Price = 15m,
                            Warranty = 60
                        },
                        new
                        {
                            Id = 36,
                            CategoryId = 6,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Type: DDR5\r\nFrequencies: 5200 MHz\r\nLatencies: 38-38-38\r\nCapacities: 2x16GB",
                            ImagePath = "/images/2x16gb-ddr5-5200-adata-lancer-rgb-366691.jpg",
                            IsAvailable = true,
                            Name = "2x16GB DDR5 5200 ADATA Lancer RGB",
                            Price = 120m,
                            Warranty = 96
                        });
                });

            modelBuilder.Entity("eShop.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("eShop.Data.Models.Cart", b =>
                {
                    b.HasOne("eShop.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("eShop.Data.Models.CartItem", b =>
                {
                    b.HasOne("eShop.Data.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShop.Data.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eShop.Data.Models.Favorite", b =>
                {
                    b.HasOne("eShop.Data.Models.Product", "Product")
                        .WithMany("Favorities")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShop.Data.Models.ApplicationUser", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eShop.Data.Models.Order", b =>
                {
                    b.HasOne("eShop.Data.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("eShop.Data.Models.OrderItem", b =>
                {
                    b.HasOne("eShop.Data.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShop.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eShop.Data.Models.Product", b =>
                {
                    b.HasOne("eShop.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("eShop.Data.Models.Review", b =>
                {
                    b.HasOne("eShop.Data.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShop.Data.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("eShop.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("eShop.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShop.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("eShop.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eShop.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("eShop.Data.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("eShop.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("eShop.Data.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("eShop.Data.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Favorities");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
